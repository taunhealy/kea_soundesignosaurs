// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SoundDesigner {
  id              String            @id @default(cuid())
  userId          String            @unique // This should match the Clerk user ID
  name            String
  username        String?           @unique
  email           String
  profileImage    String?
  presets         PresetUpload[]    // Renamed from presets
  tutorials       Tutorial[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  websiteUrl      String?
  presetRequests  PresetRequest[]   // Renamed from requestThreads
  presetSubmissions     PresetSubmission[]
  presetPacks         PresetPack[]
}

model VST {
  id      String         @id @default(cuid())
  name    String         @unique
  presets PresetUpload[]
}

enum PresetType {
  PAD
  LEAD
  PLUCK
  BASS
  FX
  OTHER
}

model PresetUpload {
  id              String         @id @default(cuid())
  title           String         @db.VarChar(255)
  description     String?        @db.Text
  presetType      PresetType
  soundPreviewUrl String?
  presetFileUrl   String?
  price           Float?
  spotifyLink     String?
  downloads       Download[]
  genre           Genre?          @relation(fields: [genreId], references: [id], onDelete: SetNull)
  genreId         String?
  soundDesigner   SoundDesigner?  @relation(fields: [soundDesignerId], references: [id], onDelete: SetNull)
  soundDesignerId String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  presetRequestId String?
  presetRequest   PresetRequest? @relation(fields: [presetRequestId], references: [id], onDelete: SetNull)
  vst             VST?            @relation(fields: [vstId], references: [id], onDelete: SetNull)
  vstId           String?         // Changed from Int to String to match VST.id type
  guide           String?
  tags            String[]
  originalFileName String?
  priceHistory    PriceHistory[]
  packs           PackPresets[]
  cartItems       CartItem[]
  quantity        Int             @default(1)
  @@index([genreId])
  @@index([soundDesignerId])
  @@index([vstId])
  @@index([createdAt])
}

model PresetRequest {
  id              String            @id @default(cuid())
  title           String
  youtubeLink     String?
  genre           Genre?            @relation(fields: [genreId], references: [id], onDelete: SetNull)
  genreId         String?
  enquiryDetails  String
  status          RequestStatus     @default(OPEN)
  userId          String
  soundDesigner   SoundDesigner     @relation(fields: [userId], references: [userId])
  submissions     PresetSubmission[]
  presetUploads   PresetUpload[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  tags            String[]

  @@index([userId])
  @@index([genreId])
}

model PresetSubmission {  // Already correctly named
  id              String        @id @default(cuid())
  presetRequestId String
  presetRequest   PresetRequest @relation(fields: [presetRequestId], references: [id])
  userId          String
  soundDesigner   SoundDesigner @relation(fields: [userId], references: [userId])
  title           String
  soundPreviewUrl String?
  presetFileUrl   String?
  guide           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  tags            String[]


  @@index([presetRequestId])
  @@index([userId])
}

model Tutorial {
  id              String        @id @default(cuid())
  title           String
  description     String
  url             String
  soundPreviewUrl String
  soundDesigner   SoundDesigner @relation(fields: [soundDesignerId], references: [id])
  soundDesignerId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Order {
  id        String   @id @default(cuid())
  userId    String
  amount    Float
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  items     OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  presetId  String?
  sampleId  String?
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Download {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  userId        String      // ID of the user who downloaded
  presetId      String?
  preset        PresetUpload? @relation(fields: [presetId], references: [id]) // Updated relation
  @@index([userId, presetId])
}

enum VSTType {
  SERUM
  VITAL
  POLYGRID
}


model Genre {
  id        String    @id @default(cuid())
  name      String    @unique
  type      String    // Changed from GenreType enum
  isSystem  Boolean   @default(false)
  presets   PresetUpload[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  presetRequests PresetRequest[]
}

enum GenreType {
  ELECTRONIC
  HIP_HOP
  ROCK
  METAL
  HARDWAVE
  WAVE
  PHONK
  FUTURE_BASS
  COLOR_BASS
  HOUSE
  TECHNO
  TRANCE
  DUBSTEP
  DRUM_AND_BASS
  DRILL
  AMAPIANO
  TRAP
  AMBIENT
  SYNTHWAVE
  EXPERIMENTAL
  IDM
  BREAKBEAT
  GLITCH_HOP
  DOWNTEMPO
  LO_FI
  CUSTOM
  SYSTEM
}



enum RequestStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model PriceHistory {
  id          String       @id @default(cuid())
  price       Decimal
  timestamp   DateTime     @default(now())
  
  presetId    String?
  preset      PresetUpload? @relation(fields: [presetId], references: [id])
  
  packId      String?
  pack        PresetPack?   @relation(fields: [packId], references: [id])

  cartItemId  String?      // Add this field
  cartItem    CartItem?    @relation(fields: [cartItemId], references: [id]) // Add this relation

  @@index([presetId])
  @@index([packId])
  @@index([cartItemId])    // Add this index
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  message   String
  metadata  Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

model PresetPack {
  id              String         @id @default(cuid())
  title           String         @db.VarChar(255)
  description     String?        @db.Text
  price           Float?
  soundPreviewUrl String?
  soundDesigner   SoundDesigner? @relation(fields: [soundDesignerId], references: [id], onDelete: SetNull)
  soundDesignerId String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  tags            String[]
  priceHistory    PriceHistory[]
  presets         PackPresets[]
  cartItems       CartItem[]

  @@index([soundDesignerId])
  @@index([createdAt])
}

// Renamed from PresetsOnPacks to PackPresets
model PackPresets {
  preset      PresetUpload @relation(fields: [presetId], references: [id])
  presetId    String
  pack        PresetPack   @relation(fields: [packId], references: [id])
  packId      String
  addedAt     DateTime     @default(now())

  @@id([presetId, packId])
  @@index([presetId])
  @@index([packId])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String
  type      CartType   // Change to enum
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([userId, type])
}

enum CartType {
  CART
  SAVED_FOR_LATER
  WISHLIST
}

enum CartItemType {
  PRESET
  PACK
}

model CartItem {
  id           String       @id @default(cuid())
  cart         Cart        @relation(fields: [cartId], references: [id])
  cartId       String
  itemType     CartItemType
  presetId     String?     // Separate field for preset ID
  packId       String?     // Separate field for pack ID
  quantity     Int         @default(1)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  priceHistory PriceHistory[]
  preset       PresetUpload? @relation(fields: [presetId], references: [id])
  pack         PresetPack?   @relation(fields: [packId], references: [id])

  @@unique([cartId, presetId, packId])
  @@index([cartId])
  @@index([presetId])
  @@index([packId])
}