// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// Core User Model
model SoundDesigner {
  id                String             @id @default(cuid())
  userId            String             @unique
  name              String
  username          String?            @unique
  email             String
  profileImage      String?
  websiteUrl        String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  presets           PresetUpload[]
  tutorials         Tutorial[]
  presetRequests    PresetRequest[]
  presetSubmissions PresetSubmission[]
  presetPacks       PresetPackUpload[]
}


// Core Content Models
model PresetUpload {
  id              String           @id @default(cuid())
  stripeProductId String?         @unique
  userId          String
  title           String           @db.VarChar(255)
  description     String?          @db.Text
  presetType      PresetType       @default(LEAD)
  soundPreviewUrl String?
  presetFileUrl   String?
  priceType       PriceType        @default(FREE)
  spotifyLink     String?
  originalFileName String?
  price           Float?
  guide           String?
  tags            String[]
  quantity        Int              @default(1)
  contentType     ContentType      @default(PRESETS)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  genre           Genre?           @relation(fields: [genreId], references: [id], onDelete: SetNull)
  genreId         String?
  soundDesigner   SoundDesigner?   @relation(fields: [soundDesignerId], references: [id], onDelete: SetNull)
  soundDesignerId String?
  presetRequest   PresetRequest?   @relation(fields: [presetRequestId], references: [id], onDelete: SetNull)
  presetRequestId String?
  vst             VST?             @relation(fields: [vstId], references: [id], onDelete: SetNull)
  vstId           String?
  
  // Child relations
  priceHistory    PriceHistory[]
  packs           PackPresets[]
  cartItems       CartItem[]
  downloads       PresetDownload[]

  @@index([genreId])
  @@index([soundDesignerId])
  @@index([vstId])
  @@index([createdAt])
}

enum PriceType {
  FREE
  PREMIUM
}


enum PresetType {
  PAD
  LEAD
  PLUCK
  BASS
  FX
  OTHER
}

model VST {
  id        String      @id @default(cuid())
  name      String
  type      VstType
  presets   PresetUpload[]
  // ... other fields
}

model PresetPackUpload {
  id              String         @id @default(cuid())
  title           String         @db.VarChar(255)
  description     String?        @db.Text
  priceType       PriceType     @default(FREE)
  price           Float?
  soundPreviewUrl String?
  tags            String[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  // Relations
  soundDesigner   SoundDesigner @relation(fields: [soundDesignerId], references: [id], onDelete: Cascade)
  soundDesignerId String
  
  // Child relations
  priceHistory    PriceHistory[]
  presets         PackPresets[]
  cartItems       CartItem[]
  downloads       PresetPackDownload[]

  @@index([soundDesignerId])
  @@index([createdAt])
}


// Download Tracking Models
model PresetDownload {
  id        String   @id @default(cuid())
  userId    String
  presetId  String
  preset    PresetUpload @relation(fields: [presetId], references: [id])
  createdAt DateTime @default(now())

  // Add a constraint to prevent self-downloads
  @@unique([userId, presetId])
}

model PresetPackDownload {
  id        String     @id @default(cuid())
  userId    String
  createdAt DateTime   @default(now())
  
  pack      PresetPackUpload @relation(fields: [packId], references: [id])
  packId    String

  @@index([userId])
  @@index([packId])
}

model Tutorial {
  id              String        @id @default(cuid())
  title           String
  description     String
  url             String
  soundPreviewUrl String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  soundDesigner   SoundDesigner @relation(fields: [soundDesignerId], references: [id])
  soundDesignerId String
}

// Request/Submission Models
model PresetRequest {
  id             String             @id @default(cuid())
  title          String
  youtubeLink    String?
  enquiryDetails String
  status         RequestStatus      @default(OPEN)
  tags           String[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  
  // Relations
  userId         String
  soundDesigner  SoundDesigner      @relation(fields: [userId], references: [userId])
  genre          Genre?             @relation(fields: [genreId], references: [id], onDelete: SetNull)
  genreId        String?
  
  // Child relations
  submissions    PresetSubmission[]
  presetUploads  PresetUpload[]

  @@index([userId])
  @@index([genreId])
}

model PresetSubmission {
  id              String        @id @default(cuid())
  title           String
  soundPreviewUrl String?
  presetFileUrl   String?
  guide           String?
  tags            String[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  presetRequestId String
  presetRequest   PresetRequest @relation(fields: [presetRequestId], references: [id])
  userId          String
  soundDesigner   SoundDesigner @relation(fields: [userId], references: [userId])

  @@index([presetRequestId])
  @@index([userId])
}

// Shopping Models
model Cart {
  id        String     @id @default(cuid())
  userId    String
  type      CartType
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]

  @@unique([userId, type])
}

model CartItem {
  id           String          @id @default(cuid())
  itemType     CartItemType
  quantity     Int            @default(1)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  
  // Relations
  cart         Cart           @relation(fields: [cartId], references: [id])
  cartId       String
  preset       PresetUpload?  @relation(fields: [presetId], references: [id])
  presetId     String?
  pack         PresetPackUpload?    @relation(fields: [packId], references: [id])
  packId       String?
  
  // Child relations
  priceHistory PriceHistory[]

  @@unique([cartId, presetId, packId])
  @@index([cartId])
  @@index([presetId])
  @@index([packId])
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  amount    Float
  status    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  items     OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid())
  presetId  String?
  sampleId  String?
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
}


enum VstType {
  SERUM
  VITAL
  // ... add other VST types as needed
}

model Genre {
  id             String         @id @default(cuid())
  name           String         @unique
  type           String
  isSystem       Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  
  presets        PresetUpload[]
  presetRequests PresetRequest[]
}

model PriceHistory {
  id          String        @id @default(cuid())
  price       Decimal
  timestamp   DateTime      @default(now())
  
  presetId    String?
  preset      PresetUpload? @relation(fields: [presetId], references: [id])
  packId      String?
  pack        PresetPackUpload?   @relation(fields: [packId], references: [id])
  cartItemId  String?
  cartItem    CartItem?     @relation(fields: [cartItemId], references: [id])

  @@index([presetId])
  @@index([packId])
  @@index([cartItemId])
}

model PackPresets {
  preset    PresetUpload @relation(fields: [presetId], references: [id])
  presetId  String
  pack      PresetPackUpload   @relation(fields: [packId], references: [id])
  packId    String
  addedAt   DateTime     @default(now())

  @@id([presetId, packId])
  @@index([presetId])
  @@index([packId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  message   String
  metadata  Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

// Enums


enum CartType {
  CART
  SAVED_FOR_LATER
  WISHLIST
}

enum CartItemType {
  PRESET
  PACK
}


enum GenreType {
  ELECTRONIC
  HIP_HOP
  ROCK
  METAL
  HARDWAVE
  WAVE
  PHONK
  FUTURE_BASS
  COLOR_BASS
  HOUSE
  TECHNO
  TRANCE
  DUBSTEP
  DRUM_AND_BASS
  DRILL
  AMAPIANO
  TRAP
  AMBIENT
  SYNTHWAVE
  EXPERIMENTAL
  IDM
  BREAKBEAT
  GLITCH_HOP
  DOWNTEMPO
  LO_FI
  CUSTOM
  SYSTEM
}

enum RequestStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ContentType {
  PRESETS
  PACKS
  REQUESTS
}

