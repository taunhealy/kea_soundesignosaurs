// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SoundDesigner {
  id          String    @id @default(cuid())
  userId      String    @unique // This should match the Clerk user ID
  name        String
  username    String? @unique
  email       String
  profileImage String?
  presets     Preset[]
  tutorials   Tutorial[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  websiteUrl  String?
  requestThreads RequestThread[]
  submissions    RequestSubmission[]
}

model VST {
  id String @id @default(cuid())
  name String @unique
  presets Preset[]
}

model Preset {
  id              String   @id @default(cuid())
  title           String
  description     String   // Add this
  guide           String   // Add this
  price           Float
  soundPreviewUrl String?
  spotifyLink     String?
  genre           Genre?   @relation(fields: [genreId], references: [id])
  genreId         String?
  soundDesigner   SoundDesigner @relation(fields: [soundDesignerId], references: [id])
  soundDesignerId String
  presetFileUrl   String   
  presetType      String    
  tags            String[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  downloads       Download[]
  vst             VST        @relation(fields: [vstId], references: [id])
  vstId           String
}

model Tutorial {
  id              String        @id @default(cuid())
  title           String
  description     String
  url             String
  soundPreviewUrl String
  soundDesigner   SoundDesigner @relation(fields: [soundDesignerId], references: [id])
  soundDesignerId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Order {
  id        String   @id @default(cuid())
  userId    String
  amount    Float
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  items     OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  presetId  String?
  sampleId  String?
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Download {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String   // ID of the user who downloaded
  presetId  String?
  preset    Preset?  @relation(fields: [presetId], references: [id])
  @@index([userId, presetId])
}

enum VSTType {
  SERUM
  VITAL
}


model Genre {
  id        String    @id @default(cuid())
  name      String    @unique
  type      String    // Changed from GenreType enum
  isSystem  Boolean   @default(false)
  presets   Preset[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum GenreType {
  ELECTRONIC
  HIP_HOP
  ROCK
  METAL
  HARDWAVE
  WAVE
  PHONK
  FUTURE_BASS
  COLOR_BASS
  HOUSE
  TECHNO
  TRANCE
  DUBSTEP
  DRUM_AND_BASS
  DRILL
  AMAPIANO
  TRAP
  AMBIENT
  SYNTHWAVE
  EXPERIMENTAL
  IDM
  BREAKBEAT
  GLITCH_HOP
  DOWNTEMPO
  LO_FI
  CUSTOM
  SYSTEM
}

model RequestThread {
  id             String           @id @default(cuid())
  title          String
  youtubeLink    String?
  genre          String
  enquiryDetails String
  userId         String
  status         RequestStatus    @default(OPEN)  // Add enum for better type safety
  submissions    RequestSubmission[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  soundDesigner  SoundDesigner   @relation(fields: [userId], references: [userId])
}

enum RequestStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model RequestSubmission {
  id              String        @id @default(cuid())
  requestThreadId String
  requestThread   RequestThread @relation(fields: [requestThreadId], references: [id])
  userId          String
  username        String
  soundPreviewUrl String?
  presetFileUrl   String?
  guide           String?
  createdAt       DateTime      @default(now())
  soundDesigner   SoundDesigner @relation(fields: [userId], references: [userId])

  @@index([requestThreadId])
  @@index([userId])
}
